/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package StockBot;

import java.util.*;

// StockList
import StockList.StockList;

// Stocks information
import Stock.Stock;

// GUI
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class App {

    final static int REFRESH_RATE = 5;

    private static JLabel price = new JLabel("MSFT Price:  Loading Data...");
    private static JLabel current_balance = new JLabel("Balance:  0");
    private static JLabel amountStock = new JLabel("Amount of Stock:  0");
    private static JFrame frame = new JFrame();

    private static int num_stock = 0;
    private static double balance = 0;

    // Holds information about the stocks
    private static StockList stocklist = new StockList();

    private static JPanel panel = new JPanel();


    // private static JPanel panel2 = new JPanel();
    // private static JLabel price2 = new JLabel("MSFT Price:  Loading Data...");


    public App() {
        // the panel with the button and text
        panel.setBorder(BorderFactory.createEmptyBorder(30, 30, 10, 30));
        panel.setLayout(new GridLayout(0, 1));
        panel.add(price);
        panel.add(current_balance);
        panel.add(amountStock);

        panel.setLayout(new GridLayout(0, 2));

        // set up the frame and display it
        frame.add(panel, BorderLayout.CENTER);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setTitle("StockBot");
        frame.pack();
        frame.setSize(500, 500);
        frame.setVisible(true);
    }

    // public static void formatPanel() {
    //     // Buy sell buttons
    //     for (Stock : )
    // }

    public static void makeButtons() {
        // the clickable button
        JButton buy_button = new JButton( new AbstractAction("Buy Stock") {
            @Override
            public void actionPerformed( ActionEvent e ) {
                if (stocklist.getStockAt(0).getCurrPrice() == -1) return;
                num_stock++;
                amountStock.setText("Amount of Stock:  " + num_stock);
                
                double price = stocklist.getStockAt(0).getCurrPrice();
                balance -= price;
                current_balance.setText("Balance:  " + String.format("%.2f", balance));
            }
        });
        JButton sell_button = new JButton( new AbstractAction("Sell Stock") {
            @Override
            public void actionPerformed( ActionEvent e ) {
                if (stocklist.getStockAt(0).getCurrPrice() == -1) return;
                if (num_stock >= 1) {
                    num_stock--;
                    amountStock.setText("Amount of Stock:  " + num_stock);
                    
                    double price = stocklist.getStockAt(0).getCurrPrice();
                    balance += price;
                    current_balance.setText("Balance:  " + String.format("%.2f", balance));
                }
            }
        });

        panel.add(buy_button);
        panel.add(sell_button);
    }

    public static void main(String[] args) {
        new App();
        makeButtons();
        
        System.out.println("Time: " + new Date());

        Stock msft = new Stock("MSFT", "https://www.investing.com/equities/apple-computer-inc");
        
        stocklist.addStock(msft);

        try {  
            while (true) {

                // Update Prices
                for (Stock stock : stocklist.getStocks()) {
                    stock.setCurrPrice(stock.getData());
                }

                price.setText("MSFT Price: " + String.format("%.2f", stocklist.getStockAt(0).getCurrPrice()));

                // Delay so we aren't overloading the website.
                Thread.sleep(REFRESH_RATE * 1000); // change to 1000
            }    
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Finished.");
    }
}
